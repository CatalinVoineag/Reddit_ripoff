exit
l.valid?
l = link.comments.new(text: params[:comments][:text], user_id: current_user.id, link_id: link.id)
ap params[:comments][:text]
ap params[:text]
ap params
params
params[:text]
l.errors.full_messages
l.error_messages
l.valid?
l
l = link.comments.new(text: params[:text], user_id: current_user.id, link_id: link.id)
l.valid?
l = link.comments.new(text: params[:text])
link.comments
link = Link.find(params[:link_id])
link
ap params
params
v l
exit
self.votes
c
n
c
exit
current_user.up_voted?
current_user
exit
v l
self
v l
self
exit
user.id
exit
link
exit
ap current_user
current_user
link.user
link = Link.find(params[:link_id])
link = Link.find(params[:id].to_i)
link = Link.find(params[:id])
params
c
exit
params[:link_id]
params
 @link = Link.find(params[:id]) || Link.find(params[:link_id])
c
n
exit
params
exit
 @link
params
c
params
exit
User.find(3)
@user
params
c
User.all
@users
c
update_attribute(:remember_digest, User.digest(remember_token))
update_attribute(:remember_digest, User.Digest(remember_token))
update_attribute(:remember_digest, User.digest(remember_token))
remember_token
self.remember_token
self
c
params
c
@current_user
session[:user_id]
session[:id]
params
c
logged_in?
c
params
c
@current_user
awesome_print session
ap session
session[:user_id]
sessions[:user_id]
session[:user_id]
session
c
params
c
\c
c
ap user_params
user_params
c
m
c
message.first
message
